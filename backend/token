const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken'); // Add the jsonwebtoken library
const User = require('./models/user');
const bcryptjs = require('bcryptjs'); // Add bcryptjs for password hashing

dotenv.config();

const app = express();

// Connect to MongoDB
mongoose.connect("mongodb+srv://user1:pass1@cluster0.mbom8gd.mongodb.net/gamestore?retryWrites=true&w=majority")
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('Error connecting to MongoDB:', err));

// Middleware
app.use(express.json()); // Parse JSON data from requests
app.use(cors()); // Enable CORS for frontend access

// Authentication middleware
const verifyToken = (req, res, next) => {
    try {
        const token = req.cookies.authToken || req.headers['authorization']; // Get token from cookie or header
        if (!token) {
            return res.status(401).json({ error: 'Unauthorized' });
        }
        const decoded = jwt.verify(token, process.env.JWT_SECRET); // Verify token with secret key
        req.user = decoded; // Attach user information to request object
        next();
    } catch (err) {
        return res.status(401).json({ error: 'Invalid token' });
    }
};

// Registration route
app.post('/register', async (req, res) => {
    const { username, email, password, confirmPassword } = req.body;

    // Validate user input (email format, password strength)
    if (!username || !email || !password || !confirmPassword) {
        return res.status(400).json({ error: 'Missing required fields' });
    }
    if (!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(email)) {
        return res.status(400).json({ error: 'Invalid email format' });
    }
    if (password.length < 8 || !/[a-z]/i.test(password) || !/[0-9]/.test(password)) {
        return res.status(400).json({ error: 'Password must be at least 8 characters and contain a letter and a number' });
    }

    // Check password matching
    if (password !== confirmPassword) {
        return res.status(400).json({ error: 'Passwords do not match' });
    }

    try {
        // Hash password before saving
        const hashedPassword = await bcryptjs.hash(password, 10); // Recommended salt rounds: 8-12

        const user = new User({ username, email, password: hashedPassword });
        await user.save();

        // Generate JWT
        const payload = { userId: user._id };
        const token = jwt.sign(payload, process.env.JWT_SECRET);

        // Set the token as a cookie with HttpOnly and Secure flags (HTTPS required)
        res.cookie('authToken', token, { httpOnly: true, secure: true }); // Enable Secure flag only when serving over HTTPS
        res.json({ message: 'Registration successful' });
    } catch (err) {
        console.error('Error registering user:', err);
        res.status(500).json({ error: 'Registration failed' });
    }
});

// Login route (rest of the code remains the same)

// ... other routes and middleware

// Login route
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const user = await User.findOne({ username });

        if (!user) {
            return res.status(401).json({ error: 'Invalid username or password' });
        }

        const isMatch = await bcryptjs.compare(password, user.password);

        if (!isMatch) {
            return res.status(401).json({ error: 'Invalid username or password' });
        }

        // Generate JWT
        const payload = { userId: user._id };
        const token = jwt.sign(payload, process.env.JWT_SECRET);

        // Set the token as a cookie with HttpOnly flag
        res.cookie('authToken', token, { httpOnly: true });
        res.json({ message: 'Login successful' });
    } catch (err) {
        console.error('Error logging in user:', err);
        res.status(500).json({ error: 'Login failed' });
    }
});

// Protected route example
app.get('/protected-route', verifyToken, (req, res) => {
    res.json({ message: 'Welcome, ' + req.user.userId });
});

app.listen(4000, () => console.log('Server listening on port 4000'));
